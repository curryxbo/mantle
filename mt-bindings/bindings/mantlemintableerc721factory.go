// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MantleMintableERC721FactoryMetaData contains all meta data concerning the MantleMintableERC721Factory contract.
var MantleMintableERC721FactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_remoteChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"MantleMintableERC721Created\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOTE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createMantleMintableERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMantleMintableERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x61012060405234801561001157600080fd5b50604051613da4380380613da483398101604081905261003091610056565b6001608081905260a052600060c0526001600160a01b0390911660e05261010052610090565b6000806040838503121561006957600080fd5b82516001600160a01b038116811461008057600080fd5b6020939093015192949293505050565b60805160a05160c05160e05161010051613cc36100e16000396000818160ce015261030401526000818161014201526102e3015260006101c2015260006101970152600061016c0152613cc36000f3fe60806040523480156200001157600080fd5b50600436106200006f5760003560e01c80637d1d0c5b11620000565780637d1d0c5b14620000c85780639eb084d914620000ff578063ee9a31a2146200013c57600080fd5b8063199d252c146200007457806354fd4d5014620000af575b600080fd5b6200009a6200008536600462000581565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b620000b962000164565b604051620000a6919062000625565b620000f07f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001620000a6565b62000116620001103660046200071c565b6200020f565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001620000a6565b620001167f000000000000000000000000000000000000000000000000000000000000000081565b6060620001917f0000000000000000000000000000000000000000000000000000000000000000620003f4565b620001bc7f0000000000000000000000000000000000000000000000000000000000000000620003f4565b620001e77f0000000000000000000000000000000000000000000000000000000000000000620003f4565b604051602001620001fb9392919062000799565b604051602081830303815290604052905090565b600073ffffffffffffffffffffffffffffffffffffffff8416620002df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4d616e746c654d696e7461626c65455243373231466163746f72793a204c312060448201527f746f6b656e20616464726573732063616e6e6f7420626520616464726573732860648201527f3029000000000000000000000000000000000000000000000000000000000000608482015260a40160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000868686604051620003349062000549565b6200034495949392919062000815565b604051809103906000f08015801562000361573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff8181166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590513381529394509188169290917fa6505bfcd168c8e77580c82dc827c059f332a3dcd172ef77da34eb0299af2a9f910160405180910390a3949350505050565b6060816000036200043857505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156200046857806200044f81620008a5565b9150620004609050600a836200090f565b91506200043c565b60008167ffffffffffffffff8111156200048657620004866200063a565b6040519080825280601f01601f191660200182016040528015620004b1576020820181803683370190505b5090505b84156200054157620004c960018362000926565b9150620004d8600a8662000940565b620004e590603062000957565b60f81b818381518110620004fd57620004fd62000972565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535062000539600a866200090f565b9450620004b5565b949350505050565b61331580620009a283390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146200057c57600080fd5b919050565b6000602082840312156200059457600080fd5b6200059f8262000557565b9392505050565b60005b83811015620005c3578181015183820152602001620005a9565b83811115620005d3576000848401525b50505050565b60008151808452620005f3816020860160208601620005a6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006200059f6020830184620005d9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126200067b57600080fd5b813567ffffffffffffffff808211156200069957620006996200063a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715620006e257620006e26200063a565b81604052838152866020858801011115620006fc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156200073257600080fd5b6200073d8462000557565b9250602084013567ffffffffffffffff808211156200075b57600080fd5b620007698783880162000669565b935060408601359150808211156200078057600080fd5b506200078f8682870162000669565b9150509250925092565b60008451620007ad818460208901620005a6565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551620007eb816001850160208a01620005a6565b6001920191820152835162000808816002840160208801620005a6565b0160020195945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835286602084015280861660408401525060a060608301526200085660a0830185620005d9565b82810360808401526200086a8185620005d9565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620008d957620008d962000876565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082620009215762000921620008e0565b500490565b6000828210156200093b576200093b62000876565b500390565b600082620009525762000952620008e0565b500690565b600082198211156200096d576200096d62000876565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe6101406040523480156200001257600080fd5b506040516200331538038062003315833981016040819052620000359162000634565b60016000808484826200004983826200075d565b5060016200005882826200075d565b50505060809290925260a05260c0526001600160a01b038516620000dd5760405162461bcd60e51b815260206004820152603160248201527f4d616e746c654d696e7461626c654552433732313a206272696467652063616e6044820152706e6f74206265206164647265737328302960781b60648201526084015b60405180910390fd5b83600003620001555760405162461bcd60e51b815260206004820152603460248201527f4d616e746c654d696e7461626c654552433732313a2072656d6f74652063686160448201527f696e2069642063616e6e6f74206265207a65726f0000000000000000000000006064820152608401620000d4565b6001600160a01b038316620001d35760405162461bcd60e51b815260206004820152603760248201527f4d616e746c654d696e7461626c654552433732313a2072656d6f746520746f6b60448201527f656e2063616e6e6f7420626520616464726573732830290000000000000000006064820152608401620000d4565b60e08490526001600160a01b0383811661010081905290861661012052620002099060146200025d602090811b62000fae17901c565b6200021f856200041d60201b620011f11760201c565b6040516020016200023292919062000829565b604051602081830303815290604052600a90816200025191906200075d565b5050505050506200099a565b606060006200026e836002620008b3565b6200027b906002620008d5565b6001600160401b038111156200029557620002956200055a565b6040519080825280601f01601f191660200182016040528015620002c0576020820181803683370190505b509050600360fc1b81600081518110620002de57620002de620008f0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620003105762000310620008f0565b60200101906001600160f81b031916908160001a905350600062000336846002620008b3565b62000343906001620008d5565b90505b6001811115620003c5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200037b576200037b620008f0565b1a60f81b828281518110620003945762000394620008f0565b60200101906001600160f81b031916908160001a90535060049490941c93620003bd8162000906565b905062000346565b508315620004165760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620000d4565b9392505050565b606081600003620004455750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200047557806200045c8162000920565b91506200046d9050600a8362000952565b915062000449565b6000816001600160401b038111156200049257620004926200055a565b6040519080825280601f01601f191660200182016040528015620004bd576020820181803683370190505b5090505b84156200053557620004d560018362000969565b9150620004e4600a8662000983565b620004f1906030620008d5565b60f81b818381518110620005095762000509620008f0565b60200101906001600160f81b031916908160001a9053506200052d600a8662000952565b9450620004c1565b949350505050565b80516001600160a01b03811681146200055557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200058d57818101518382015260200162000573565b838111156200059d576000848401525b50505050565b600082601f830112620005b557600080fd5b81516001600160401b0380821115620005d257620005d26200055a565b604051601f8301601f19908116603f01168101908282118183101715620005fd57620005fd6200055a565b816040528381528660208588010111156200061757600080fd5b6200062a84602083016020890162000570565b9695505050505050565b600080600080600060a086880312156200064d57600080fd5b62000658866200053d565b9450602086015193506200066f604087016200053d565b60608701519093506001600160401b03808211156200068d57600080fd5b6200069b89838a01620005a3565b93506080880151915080821115620006b257600080fd5b50620006c188828901620005a3565b9150509295509295909350565b600181811c90821680620006e357607f821691505b6020821081036200070457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200075857600081815260208120601f850160051c81016020861015620007335750805b601f850160051c820191505b8181101562000754578281556001016200073f565b5050505b505050565b81516001600160401b038111156200077957620007796200055a565b62000791816200078a8454620006ce565b846200070a565b602080601f831160018114620007c95760008415620007b05750858301515b600019600386901b1c1916600185901b17855562000754565b600085815260208120601f198616915b82811015620007fa57888601518255948401946001909101908401620007d9565b5085821015620008195787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6832ba3432b932bab69d60b91b8152600083516200084f81600985016020880162000570565b600160fe1b60099184019182015283516200087281600a84016020880162000570565b712f746f6b656e5552493f75696e743235363d60701b600a9290910191820152601c01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620008d057620008d06200089d565b500290565b60008219821115620008eb57620008eb6200089d565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816200091857620009186200089d565b506000190190565b6000600182016200093557620009356200089d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200096457620009646200093c565b500490565b6000828210156200097e576200097e6200089d565b500390565b6000826200099557620009956200093c565b500690565b60805160a05160c05160e051610100516101205161290862000a0d600039600081816103ae0152818161044601528181610be10152610d030152600081816101e001526103880152600081816102f501526103d401526000610a10015260006109e7015260006109be01526129086000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637d1d0c5b116100ee578063c87b56dd11610097578063e78cea9211610071578063e78cea92146103ac578063e9518196146103d2578063e985e9c5146103f8578063ee9a31a21461044157600080fd5b8063c87b56dd1461036b578063d547cfb71461037e578063d6c0b2c41461038657600080fd5b8063a1448194116100c8578063a144819414610332578063a22cb46514610345578063b88d4fde1461035857600080fd5b80637d1d0c5b146102f057806395d89b41146103175780639dc29fac1461031f57600080fd5b806323b872dd1161015b5780634f6ccce7116101355780634f6ccce7146102af57806354fd4d50146102c25780636352211e146102ca57806370a08231146102dd57600080fd5b806323b872dd146102765780632f745c591461028957806342842e0e1461029c57600080fd5b8063081812fc1161018c578063081812fc1461023c578063095ea7b31461024f57806318160ddd1461026457600080fd5b806301ffc9a7146101b3578063033964be146101db57806306fdde0314610227575b600080fd5b6101c66101c13660046122df565b610468565b60405190151581526020015b60405180910390f35b6102027f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b61022f610517565b6040516101d29190612372565b61020261024a366004612385565b6105a9565b61026261025d3660046123c7565b6105dd565b005b6008545b6040519081526020016101d2565b6102626102843660046123f1565b61076e565b6102686102973660046123c7565b61080f565b6102626102aa3660046123f1565b6108de565b6102686102bd366004612385565b6108f9565b61022f6109b7565b6102026102d8366004612385565b610a5a565b6102686102eb36600461242d565b610aec565b6102687f000000000000000000000000000000000000000000000000000000000000000081565b61022f610bba565b61026261032d3660046123c7565b610bc9565b6102626103403660046123c7565b610ceb565b610262610353366004612448565b610e02565b6102626103663660046124b3565b610e11565b61022f610379366004612385565b610eb9565b61022f610f20565b7f0000000000000000000000000000000000000000000000000000000000000000610202565b7f0000000000000000000000000000000000000000000000000000000000000000610202565b7f0000000000000000000000000000000000000000000000000000000000000000610268565b6101c66104063660046125ad565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102027f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007f74259ebf000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000841682148061050057507fffffffff00000000000000000000000000000000000000000000000000000000848116908216145b8061050f575061050f84611326565b949350505050565b606060008054610526906125e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610552906125e0565b801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b5050505050905090565b60006105b48261137c565b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006105e882610a5a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff821614806106d357506106d38133610406565b61075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106a1565b610769838361140a565b505050565b61077833826114aa565b610804576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016106a1565b610769838383611569565b600061081a83610aec565b82106108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106a1565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205490565b61076983838360405180602001604052806000815250610e11565b600061090460085490565b8210610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106a1565b600882815481106109a5576109a5612633565b90600052602060002001549050919050565b60606109e27f00000000000000000000000000000000000000000000000000000000000000006111f1565b610a0b7f00000000000000000000000000000000000000000000000000000000000000006111f1565b610a347f00000000000000000000000000000000000000000000000000000000000000006111f1565b604051602001610a4693929190612662565b604051602081830303815290604052905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106a1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016106a1565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b606060018054610526906125e0565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4d616e746c654d696e7461626c654552433732313a206f6e6c7920627269646760448201527f652063616e2063616c6c20746869732066756e6374696f6e000000000000000060648201526084016106a1565b610c97816117db565b8173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca582604051610cdf91815260200190565b60405180910390a25050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610db0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4d616e746c654d696e7461626c654552433732313a206f6e6c7920627269646760448201527f652063616e2063616c6c20746869732066756e6374696f6e000000000000000060648201526084016106a1565b610dba82826118b4565b8173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688582604051610cdf91815260200190565b610e0d3383836118ce565b5050565b610e1b33836114aa565b610ea7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016106a1565b610eb3848484846119fb565b50505050565b6060610ec48261137c565b6000610ece611a9e565b90506000815111610eee5760405180602001604052806000815250610f19565b80610ef8846111f1565b604051602001610f099291906126d8565b6040516020818303038152906040525b9392505050565b600a8054610f2d906125e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610f59906125e0565b8015610fa65780601f10610f7b57610100808354040283529160200191610fa6565b820191906000526020600020905b815481529060010190602001808311610f8957829003601f168201915b505050505081565b60606000610fbd836002612736565b610fc8906002612773565b67ffffffffffffffff811115610fe057610fe0612484565b6040519080825280601f01601f19166020018201604052801561100a576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061104157611041612633565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106110a4576110a4612633565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006110e0846002612736565b6110eb906001612773565b90505b6001811115611188577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061112c5761112c612633565b1a60f81b82828151811061114257611142612633565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936111818161278b565b90506110ee565b508315610f19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a1565b60608160000361123457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561125e5780611248816127c0565b91506112579050600a83612827565b9150611238565b60008167ffffffffffffffff81111561127957611279612484565b6040519080825280601f01601f1916602001820160405280156112a3576020820181803683370190505b5090505b841561050f576112b860018361283b565b91506112c5600a86612852565b6112d0906030612773565b60f81b8183815181106112e5576112e5612633565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061131f600a86612827565b94506112a7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610ae65750610ae682611aad565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16611407576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106a1565b50565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061146482610a5a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806114b683610a5a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611524575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b8061050f57508373ffffffffffffffffffffffffffffffffffffffff1661154a846105a9565b73ffffffffffffffffffffffffffffffffffffffff1614949350505050565b8273ffffffffffffffffffffffffffffffffffffffff1661158982610a5a565b73ffffffffffffffffffffffffffffffffffffffff161461162c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016106a1565b73ffffffffffffffffffffffffffffffffffffffff82166116ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106a1565b6116d9838383611b90565b6116e460008261140a565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812080546001929061171a90849061283b565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290611755908490612773565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006117e682610a5a565b90506117f481600084611b90565b6117ff60008361140a565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040812080546001929061183590849061283b565b909155505060008281526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610e0d828260405180602001604052806000815250611c96565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106a1565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a06848484611569565b611a1284848484611d39565b610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016106a1565b6060600a8054610526906125e0565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611b4057507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ae657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610ae6565b73ffffffffffffffffffffffffffffffffffffffff8316611bf857611bf381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611c35565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c3557611c358382611f2c565b73ffffffffffffffffffffffffffffffffffffffff8216611c595761076981611fe3565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610769576107698282612092565b611ca083836120e3565b611cad6000848484611d39565b610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016106a1565b600073ffffffffffffffffffffffffffffffffffffffff84163b15611f21576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611db0903390899088908890600401612866565b6020604051808303816000875af1925050508015611e09575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611e06918101906128af565b60015b611ed6573d808015611e37576040519150601f19603f3d011682016040523d82523d6000602084013e611e3c565b606091505b508051600003611ece576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016106a1565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061050f565b506001949350505050565b60006001611f3984610aec565b611f43919061283b565b600083815260076020526040902054909150808214611fa35773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b50600091825260076020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600681528383209183525290812055565b600854600090611ff59060019061283b565b6000838152600960205260408120546008805493945090928490811061201d5761201d612633565b90600052602060002001549050806008838154811061203e5761203e612633565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612076576120766128cc565b6001900381819060005260206000200160009055905550505050565b600061209d83610aec565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b73ffffffffffffffffffffffffffffffffffffffff8216612160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106a1565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16156121ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106a1565b6121f860008383611b90565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080546001929061222e908490612773565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461140757600080fd5b6000602082840312156122f157600080fd5b8135610f19816122b1565b60005b838110156123175781810151838201526020016122ff565b83811115610eb35750506000910152565b600081518084526123408160208601602086016122fc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610f196020830184612328565b60006020828403121561239757600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146123c257600080fd5b919050565b600080604083850312156123da57600080fd5b6123e38361239e565b946020939093013593505050565b60008060006060848603121561240657600080fd5b61240f8461239e565b925061241d6020850161239e565b9150604084013590509250925092565b60006020828403121561243f57600080fd5b610f198261239e565b6000806040838503121561245b57600080fd5b6124648361239e565b91506020830135801515811461247957600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156124c957600080fd5b6124d28561239e565b93506124e06020860161239e565b925060408501359150606085013567ffffffffffffffff8082111561250457600080fd5b818701915087601f83011261251857600080fd5b81358181111561252a5761252a612484565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561257057612570612484565b816040528281528a602084870101111561258957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156125c057600080fd5b6125c98361239e565b91506125d76020840161239e565b90509250929050565b600181811c908216806125f457607f821691505b60208210810361262d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600084516126748184602089016122fc565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516126b0816001850160208a016122fc565b600192019182015283516126cb8160028401602088016122fc565b0160020195945050505050565b600083516126ea8184602088016122fc565b8351908301906126fe8183602088016122fc565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561276e5761276e612707565b500290565b6000821982111561278657612786612707565b500190565b60008161279a5761279a612707565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127f1576127f1612707565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612836576128366127f8565b500490565b60008282101561284d5761284d612707565b500390565b600082612861576128616127f8565b500690565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526128a56080830184612328565b9695505050505050565b6000602082840312156128c157600080fd5b8151610f19816122b1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c634300080f000aa164736f6c634300080f000a",
}

// MantleMintableERC721FactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use MantleMintableERC721FactoryMetaData.ABI instead.
var MantleMintableERC721FactoryABI = MantleMintableERC721FactoryMetaData.ABI

// MantleMintableERC721FactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MantleMintableERC721FactoryMetaData.Bin instead.
var MantleMintableERC721FactoryBin = MantleMintableERC721FactoryMetaData.Bin

// DeployMantleMintableERC721Factory deploys a new Ethereum contract, binding an instance of MantleMintableERC721Factory to it.
func DeployMantleMintableERC721Factory(auth *bind.TransactOpts, backend bind.ContractBackend, _bridge common.Address, _remoteChainId *big.Int) (common.Address, *types.Transaction, *MantleMintableERC721Factory, error) {
	parsed, err := MantleMintableERC721FactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MantleMintableERC721FactoryBin), backend, _bridge, _remoteChainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MantleMintableERC721Factory{MantleMintableERC721FactoryCaller: MantleMintableERC721FactoryCaller{contract: contract}, MantleMintableERC721FactoryTransactor: MantleMintableERC721FactoryTransactor{contract: contract}, MantleMintableERC721FactoryFilterer: MantleMintableERC721FactoryFilterer{contract: contract}}, nil
}

// MantleMintableERC721Factory is an auto generated Go binding around an Ethereum contract.
type MantleMintableERC721Factory struct {
	MantleMintableERC721FactoryCaller     // Read-only binding to the contract
	MantleMintableERC721FactoryTransactor // Write-only binding to the contract
	MantleMintableERC721FactoryFilterer   // Log filterer for contract events
}

// MantleMintableERC721FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MantleMintableERC721FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MantleMintableERC721FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MantleMintableERC721FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MantleMintableERC721FactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MantleMintableERC721FactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MantleMintableERC721FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MantleMintableERC721FactorySession struct {
	Contract     *MantleMintableERC721Factory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// MantleMintableERC721FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MantleMintableERC721FactoryCallerSession struct {
	Contract *MantleMintableERC721FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// MantleMintableERC721FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MantleMintableERC721FactoryTransactorSession struct {
	Contract     *MantleMintableERC721FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// MantleMintableERC721FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MantleMintableERC721FactoryRaw struct {
	Contract *MantleMintableERC721Factory // Generic contract binding to access the raw methods on
}

// MantleMintableERC721FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MantleMintableERC721FactoryCallerRaw struct {
	Contract *MantleMintableERC721FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// MantleMintableERC721FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MantleMintableERC721FactoryTransactorRaw struct {
	Contract *MantleMintableERC721FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMantleMintableERC721Factory creates a new instance of MantleMintableERC721Factory, bound to a specific deployed contract.
func NewMantleMintableERC721Factory(address common.Address, backend bind.ContractBackend) (*MantleMintableERC721Factory, error) {
	contract, err := bindMantleMintableERC721Factory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MantleMintableERC721Factory{MantleMintableERC721FactoryCaller: MantleMintableERC721FactoryCaller{contract: contract}, MantleMintableERC721FactoryTransactor: MantleMintableERC721FactoryTransactor{contract: contract}, MantleMintableERC721FactoryFilterer: MantleMintableERC721FactoryFilterer{contract: contract}}, nil
}

// NewMantleMintableERC721FactoryCaller creates a new read-only instance of MantleMintableERC721Factory, bound to a specific deployed contract.
func NewMantleMintableERC721FactoryCaller(address common.Address, caller bind.ContractCaller) (*MantleMintableERC721FactoryCaller, error) {
	contract, err := bindMantleMintableERC721Factory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MantleMintableERC721FactoryCaller{contract: contract}, nil
}

// NewMantleMintableERC721FactoryTransactor creates a new write-only instance of MantleMintableERC721Factory, bound to a specific deployed contract.
func NewMantleMintableERC721FactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*MantleMintableERC721FactoryTransactor, error) {
	contract, err := bindMantleMintableERC721Factory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MantleMintableERC721FactoryTransactor{contract: contract}, nil
}

// NewMantleMintableERC721FactoryFilterer creates a new log filterer instance of MantleMintableERC721Factory, bound to a specific deployed contract.
func NewMantleMintableERC721FactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*MantleMintableERC721FactoryFilterer, error) {
	contract, err := bindMantleMintableERC721Factory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MantleMintableERC721FactoryFilterer{contract: contract}, nil
}

// bindMantleMintableERC721Factory binds a generic wrapper to an already deployed contract.
func bindMantleMintableERC721Factory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MantleMintableERC721FactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MantleMintableERC721Factory.Contract.MantleMintableERC721FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.Contract.MantleMintableERC721FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.Contract.MantleMintableERC721FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MantleMintableERC721Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.Contract.contract.Transact(opts, method, params...)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCaller) BRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MantleMintableERC721Factory.contract.Call(opts, &out, "BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_MantleMintableERC721Factory *MantleMintableERC721FactorySession) BRIDGE() (common.Address, error) {
	return _MantleMintableERC721Factory.Contract.BRIDGE(&_MantleMintableERC721Factory.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCallerSession) BRIDGE() (common.Address, error) {
	return _MantleMintableERC721Factory.Contract.BRIDGE(&_MantleMintableERC721Factory.CallOpts)
}

// REMOTECHAINID is a free data retrieval call binding the contract method 0x7d1d0c5b.
//
// Solidity: function REMOTE_CHAIN_ID() view returns(uint256)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCaller) REMOTECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantleMintableERC721Factory.contract.Call(opts, &out, "REMOTE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REMOTECHAINID is a free data retrieval call binding the contract method 0x7d1d0c5b.
//
// Solidity: function REMOTE_CHAIN_ID() view returns(uint256)
func (_MantleMintableERC721Factory *MantleMintableERC721FactorySession) REMOTECHAINID() (*big.Int, error) {
	return _MantleMintableERC721Factory.Contract.REMOTECHAINID(&_MantleMintableERC721Factory.CallOpts)
}

// REMOTECHAINID is a free data retrieval call binding the contract method 0x7d1d0c5b.
//
// Solidity: function REMOTE_CHAIN_ID() view returns(uint256)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCallerSession) REMOTECHAINID() (*big.Int, error) {
	return _MantleMintableERC721Factory.Contract.REMOTECHAINID(&_MantleMintableERC721Factory.CallOpts)
}

// IsMantleMintableERC721 is a free data retrieval call binding the contract method 0x199d252c.
//
// Solidity: function isMantleMintableERC721(address ) view returns(bool)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCaller) IsMantleMintableERC721(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _MantleMintableERC721Factory.contract.Call(opts, &out, "isMantleMintableERC721", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMantleMintableERC721 is a free data retrieval call binding the contract method 0x199d252c.
//
// Solidity: function isMantleMintableERC721(address ) view returns(bool)
func (_MantleMintableERC721Factory *MantleMintableERC721FactorySession) IsMantleMintableERC721(arg0 common.Address) (bool, error) {
	return _MantleMintableERC721Factory.Contract.IsMantleMintableERC721(&_MantleMintableERC721Factory.CallOpts, arg0)
}

// IsMantleMintableERC721 is a free data retrieval call binding the contract method 0x199d252c.
//
// Solidity: function isMantleMintableERC721(address ) view returns(bool)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCallerSession) IsMantleMintableERC721(arg0 common.Address) (bool, error) {
	return _MantleMintableERC721Factory.Contract.IsMantleMintableERC721(&_MantleMintableERC721Factory.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MantleMintableERC721Factory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MantleMintableERC721Factory *MantleMintableERC721FactorySession) Version() (string, error) {
	return _MantleMintableERC721Factory.Contract.Version(&_MantleMintableERC721Factory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryCallerSession) Version() (string, error) {
	return _MantleMintableERC721Factory.Contract.Version(&_MantleMintableERC721Factory.CallOpts)
}

// CreateMantleMintableERC721 is a paid mutator transaction binding the contract method 0x9eb084d9.
//
// Solidity: function createMantleMintableERC721(address _remoteToken, string _name, string _symbol) returns(address)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryTransactor) CreateMantleMintableERC721(opts *bind.TransactOpts, _remoteToken common.Address, _name string, _symbol string) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.contract.Transact(opts, "createMantleMintableERC721", _remoteToken, _name, _symbol)
}

// CreateMantleMintableERC721 is a paid mutator transaction binding the contract method 0x9eb084d9.
//
// Solidity: function createMantleMintableERC721(address _remoteToken, string _name, string _symbol) returns(address)
func (_MantleMintableERC721Factory *MantleMintableERC721FactorySession) CreateMantleMintableERC721(_remoteToken common.Address, _name string, _symbol string) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.Contract.CreateMantleMintableERC721(&_MantleMintableERC721Factory.TransactOpts, _remoteToken, _name, _symbol)
}

// CreateMantleMintableERC721 is a paid mutator transaction binding the contract method 0x9eb084d9.
//
// Solidity: function createMantleMintableERC721(address _remoteToken, string _name, string _symbol) returns(address)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryTransactorSession) CreateMantleMintableERC721(_remoteToken common.Address, _name string, _symbol string) (*types.Transaction, error) {
	return _MantleMintableERC721Factory.Contract.CreateMantleMintableERC721(&_MantleMintableERC721Factory.TransactOpts, _remoteToken, _name, _symbol)
}

// MantleMintableERC721FactoryMantleMintableERC721CreatedIterator is returned from FilterMantleMintableERC721Created and is used to iterate over the raw logs and unpacked data for MantleMintableERC721Created events raised by the MantleMintableERC721Factory contract.
type MantleMintableERC721FactoryMantleMintableERC721CreatedIterator struct {
	Event *MantleMintableERC721FactoryMantleMintableERC721Created // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantleMintableERC721FactoryMantleMintableERC721CreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantleMintableERC721FactoryMantleMintableERC721Created)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantleMintableERC721FactoryMantleMintableERC721Created)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantleMintableERC721FactoryMantleMintableERC721CreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantleMintableERC721FactoryMantleMintableERC721CreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantleMintableERC721FactoryMantleMintableERC721Created represents a MantleMintableERC721Created event raised by the MantleMintableERC721Factory contract.
type MantleMintableERC721FactoryMantleMintableERC721Created struct {
	LocalToken  common.Address
	RemoteToken common.Address
	Deployer    common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMantleMintableERC721Created is a free log retrieval operation binding the contract event 0xa6505bfcd168c8e77580c82dc827c059f332a3dcd172ef77da34eb0299af2a9f.
//
// Solidity: event MantleMintableERC721Created(address indexed localToken, address indexed remoteToken, address deployer)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryFilterer) FilterMantleMintableERC721Created(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address) (*MantleMintableERC721FactoryMantleMintableERC721CreatedIterator, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}

	logs, sub, err := _MantleMintableERC721Factory.contract.FilterLogs(opts, "MantleMintableERC721Created", localTokenRule, remoteTokenRule)
	if err != nil {
		return nil, err
	}
	return &MantleMintableERC721FactoryMantleMintableERC721CreatedIterator{contract: _MantleMintableERC721Factory.contract, event: "MantleMintableERC721Created", logs: logs, sub: sub}, nil
}

// WatchMantleMintableERC721Created is a free log subscription operation binding the contract event 0xa6505bfcd168c8e77580c82dc827c059f332a3dcd172ef77da34eb0299af2a9f.
//
// Solidity: event MantleMintableERC721Created(address indexed localToken, address indexed remoteToken, address deployer)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryFilterer) WatchMantleMintableERC721Created(opts *bind.WatchOpts, sink chan<- *MantleMintableERC721FactoryMantleMintableERC721Created, localToken []common.Address, remoteToken []common.Address) (event.Subscription, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}

	logs, sub, err := _MantleMintableERC721Factory.contract.WatchLogs(opts, "MantleMintableERC721Created", localTokenRule, remoteTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantleMintableERC721FactoryMantleMintableERC721Created)
				if err := _MantleMintableERC721Factory.contract.UnpackLog(event, "MantleMintableERC721Created", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMantleMintableERC721Created is a log parse operation binding the contract event 0xa6505bfcd168c8e77580c82dc827c059f332a3dcd172ef77da34eb0299af2a9f.
//
// Solidity: event MantleMintableERC721Created(address indexed localToken, address indexed remoteToken, address deployer)
func (_MantleMintableERC721Factory *MantleMintableERC721FactoryFilterer) ParseMantleMintableERC721Created(log types.Log) (*MantleMintableERC721FactoryMantleMintableERC721Created, error) {
	event := new(MantleMintableERC721FactoryMantleMintableERC721Created)
	if err := _MantleMintableERC721Factory.contract.UnpackLog(event, "MantleMintableERC721Created", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
