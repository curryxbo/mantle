// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TypesOutputRootProof is an auto generated low-level Go binding around an user-defined struct.
type TypesOutputRootProof struct {
	Version                  [32]byte
	StateRoot                [32]byte
	MessagePasserStorageRoot [32]byte
	LatestBlockhash          [32]byte
}

// TypesWithdrawalTransaction is an auto generated low-level Go binding around an user-defined struct.
type TypesWithdrawalTransaction struct {
	Nonce    *big.Int
	Sender   common.Address
	Target   common.Address
	Value    *big.Int
	GasLimit *big.Int
	Data     []byte
}

// MantlePortalMetaData contains all meta data concerning the MantlePortal contract.
var MantlePortalMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"_l2Oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"opaqueData\",\"type\":\"bytes\"}],\"name\":\"TransactionDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawalProven\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_FEE_MAX_CHANGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ELASTICITY_MULTIPLIER\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE\",\"outputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_BASE_FEE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESOURCE_LIMIT\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BASE_FEE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_RESOURCE_LIMIT\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isCreation\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depositTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.WithdrawalTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"finalizeWithdrawalTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"finalizedWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2OutputIndex\",\"type\":\"uint256\"}],\"name\":\"isOutputFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"prevBaseFee\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"prevBoughtGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevBlockNum\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.WithdrawalTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_l2OutputIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"latestBlockhash\",\"type\":\"bytes32\"}],\"internalType\":\"structTypes.OutputRootProof\",\"name\":\"_outputRootProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"_withdrawalProof\",\"type\":\"bytes[]\"}],\"name\":\"proveWithdrawalTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"provenWithdrawals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"l2OutputIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620059473803806200594783398101604081905262000035916200028e565b6001608052600260a052600060c0526001600160a01b0380841660e05282166101005262000063816200006c565b505050620002e6565b600054610100900460ff16158080156200008d5750600054600160ff909116105b80620000bd5750620000aa30620001c360201b620020361760201c565b158015620000bd575060005460ff166001145b620001265760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156200014a576000805461ff0019166101001790555b603280546001600160a01b03191661dead1790556035805483151560ff1990911617905562000178620001d2565b8015620001bf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b600054610100900460ff166200023f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016200011d565b60408051606081018252633b9aca0080825260006020830152436001600160401b031691909201819052600160c01b0217600155565b6001600160a01b03811681146200028b57600080fd5b50565b600080600060608486031215620002a457600080fd5b8351620002b18162000275565b6020850151909350620002c48162000275565b60408501519092508015158114620002db57600080fd5b809150509250925092565b60805160a05160c05160e051610100516155e4620003636000396000818161035701528181610ad001526113d30152600081816101c101528181610d3901528181610f1a0152818161132f015281816116e90152818161195b01526122fc0152600061129a015260006112710152600061124801526155e46000f3fe6080604052600436106101835760003560e01c80638456cb59116100d6578063ca3e99ba1161007f578063d53a822f11610059578063d53a822f146104ec578063e965084c1461050c578063e9e05c421461059857600080fd5b8063ca3e99ba14610421578063cd7c978914610436578063cff0ab961461044b57600080fd5b80638c3152e9116100b05780638c3152e9146103a45780639bf62d82146103c4578063a14238e7146103f157600080fd5b80638456cb5914610379578063867ead131461038e5780638b4c40b0146101a857600080fd5b80635c1f2827116101385780636bb0291e116101125780636bb0291e146103105780636dbffb7814610325578063724c184c1461034557600080fd5b80635c1f28271461029d5780635c975abb146102cf57806364b79208146102f957600080fd5b80633f4ba83a116101695780633f4ba83a146102465780634870496f1461025b57806354fd4d501461027b57600080fd5b80621c2ff6146101af57806313620abd1461020d57600080fd5b366101aa576101a83334620186a06000604051806020016040528060008152506105a6565b005b600080fd5b3480156101bb57600080fd5b506101e37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561021957600080fd5b50610225633b9aca0081565b6040516fffffffffffffffffffffffffffffffff9091168152602001610204565b34801561025257600080fd5b506101a8610ab8565b34801561026757600080fd5b506101a8610276366004614c79565b610bdb565b34801561028757600080fd5b50610290611241565b6040516102049190614dcf565b3480156102a957600080fd5b506102c16fffffffffffffffffffffffffffffffff81565b604051908152602001610204565b3480156102db57600080fd5b506035546102e99060ff1681565b6040519015158152602001610204565b34801561030557600080fd5b506102c1627a120081565b34801561031c57600080fd5b506102c1600481565b34801561033157600080fd5b506102e9610340366004614de2565b6112e4565b34801561035157600080fd5b506101e37f000000000000000000000000000000000000000000000000000000000000000081565b34801561038557600080fd5b506101a86113bb565b34801561039a57600080fd5b506102c161271081565b3480156103b057600080fd5b506101a86103bf366004614dfb565b6114db565b3480156103d057600080fd5b506032546101e39073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103fd57600080fd5b506102e961040c366004614de2565b60336020526000908152604090205460ff1681565b34801561042d57600080fd5b506102c1611e38565b34801561044257600080fd5b506102c1600881565b34801561045757600080fd5b506001546104b3906fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845267ffffffffffffffff9283166020850152911690820152606001610204565b3480156104f857600080fd5b506101a8610507366004614e40565b611e49565b34801561051857600080fd5b5061056a610527366004614de2565b603460205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041683565b604080519384526fffffffffffffffffffffffffffffffff9283166020850152911690820152606001610204565b6101a86105a6366004614e5b565b8260005a9050831561065b5773ffffffffffffffffffffffffffffffffffffffff87161561065b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4d616e746c65506f7274616c3a206d7573742073656e6420746f20616464726560448201527f7373283029207768656e206372656174696e67206120636f6e7472616374000060648201526084015b60405180910390fd5b6152088567ffffffffffffffff1610156106f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4d616e746c65506f7274616c3a20676173206c696d6974206d75737420636f7660448201527f657220696e737472696e7369632067617320636f7374000000000000000000006064820152608401610652565b33328114610718575033731111000000000000000000000000000000001111015b60003488888888604051602001610733959493929190614ee0565b604051602081830303815290604052905060008973ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32846040516107a39190614dcf565b60405180910390a450506001546000906107e3907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1643614f74565b905080156109175760006107fb6004627a1200614fba565b6001546108269190700100000000000000000000000000000000900467ffffffffffffffff16615022565b90506000600861083a6004627a1200614fba565b6108449190615096565b6001546108649084906fffffffffffffffffffffffffffffffff16615096565b61086e9190614fba565b6001549091506000906108b1906108989084906fffffffffffffffffffffffffffffffff16615152565b6127106fffffffffffffffffffffffffffffffff612052565b905060018411156108d8576108d56108988260086108d0600189614f74565b612071565b90505b6fffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000067ffffffffffffffff4316021760015550505b6001805484919060109061094a908490700100000000000000000000000000000000900467ffffffffffffffff166151c6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550627a1200600160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff161315610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5265736f757263654d65746572696e673a2063616e6e6f7420627579206d6f7260448201527f6520676173207468616e20617661696c61626c6520676173206c696d697400006064820152608401610652565b600154600090610a52906fffffffffffffffffffffffffffffffff1667ffffffffffffffff86166151f2565b6fffffffffffffffffffffffffffffffff1690506000610a7648633b9aca006120c6565b610a80908361522a565b905060005a610a8f9086614f74565b905080821115610aab57610aab610aa68284614f74565b6120dd565b5050505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610b7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d616e746c65506f7274616c3a206f6e6c7920677561726469616e2063616e2060448201527f756e7061757365000000000000000000000000000000000000000000000000006064820152608401610652565b603580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60355460ff1615610c48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d616e746c65506f7274616c3a207061757365640000000000000000000000006044820152606401610652565b3073ffffffffffffffffffffffffffffffffffffffff16856040015173ffffffffffffffffffffffffffffffffffffffff1603610d07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d616e746c65506f7274616c3a20796f752063616e6e6f742073656e64206d6560448201527f73736167657320746f2074686520706f7274616c20636f6e74726163740000006064820152608401610652565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae55790602401606060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db9919061525e565b519050610dd3610dce368690038601866152c3565b61210b565b8114610e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d616e746c65506f7274616c3a20696e76616c6964206f757470757420726f6f60448201527f742070726f6f66000000000000000000000000000000000000000000000000006064820152608401610652565b6000610e6c87612167565b6000818152603460209081526040918290208251606081018452815481526001909101546fffffffffffffffffffffffffffffffff8082169383018490527001000000000000000000000000000000009091041692810192909252919250901580610f9e5750805160408083015190517fa25ae5570000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff90911660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae55790602401606060405180830381865afa158015610f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9a919061525e565b5114155b61102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4d616e746c65506f7274616c3a207769746864726177616c206861736820686160448201527f7320616c7265616479206265656e2070726f76656e00000000000000000000006064820152608401610652565b60408051602081018490526000918101829052606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012090830181905292506110f39101604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828201909152600182527f01000000000000000000000000000000000000000000000000000000000000006020830152906110e9888a615329565b8a60400135612197565b61117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d616e746c65506f7274616c3a20696e76616c6964207769746864726177616c60448201527f20696e636c7573696f6e2070726f6f66000000000000000000000000000000006064820152608401610652565b604080516060810182528581526fffffffffffffffffffffffffffffffff42811660208084019182528c831684860190815260008981526034835286812095518655925190518416700100000000000000000000000000000000029316929092176001909301929092558b830151908c0151925173ffffffffffffffffffffffffffffffffffffffff918216939091169186917f67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f629190a4505050505050505050565b606061126c7f00000000000000000000000000000000000000000000000000000000000000006121bb565b6112957f00000000000000000000000000000000000000000000000000000000000000006121bb565b6112be7f00000000000000000000000000000000000000000000000000000000000000006121bb565b6040516020016112d0939291906153ad565b604051602081830303815290604052905090565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018290526000906113b59073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a25ae55790602401606060405180830381865afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a919061525e565b602001516fffffffffffffffffffffffffffffffff166122f8565b92915050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4d616e746c65506f7274616c3a206f6e6c7920677561726469616e2063616e2060448201527f70617573650000000000000000000000000000000000000000000000000000006064820152608401610652565b603580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610bd1565b60355460ff1615611548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d616e746c65506f7274616c3a207061757365640000000000000000000000006044820152606401610652565b60325473ffffffffffffffffffffffffffffffffffffffff1661dead146115f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d616e746c65506f7274616c3a2063616e206f6e6c792074726967676572206f60448201527f6e65207769746864726177616c20706572207472616e73616374696f6e0000006064820152608401610652565b60006115fc82612167565b60008181526034602090815260408083208151606081018352815481526001909101546fffffffffffffffffffffffffffffffff808216948301859052700100000000000000000000000000000000909104169181019190915292935090036116e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d616e746c65506f7274616c3a207769746864726177616c20686173206e6f7460448201527f206265656e2070726f76656e20796574000000000000000000000000000000006064820152608401610652565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663887862726040518163ffffffff1660e01b8152600401602060405180830381865afa158015611752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117769190615423565b81602001516fffffffffffffffffffffffffffffffff161015611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f4d616e746c65506f7274616c3a207769746864726177616c2074696d6573746160448201527f6d70206c657373207468616e204c32204f7261636c65207374617274696e672060648201527f74696d657374616d700000000000000000000000000000000000000000000000608482015260a401610652565b61186081602001516fffffffffffffffffffffffffffffffff166122f8565b611912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f4d616e746c65506f7274616c3a2070726f76656e207769746864726177616c2060448201527f66696e616c697a6174696f6e20706572696f6420686173206e6f7420656c617060648201527f7365640000000000000000000000000000000000000000000000000000000000608482015260a401610652565b60408181015190517fa25ae5570000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff90911660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae55790602401606060405180830381865afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db919061525e565b8251815191925014611a95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604760248201527f4d616e746c65506f7274616c3a206f757470757420726f6f742070726f76656e60448201527f206973206e6f74207468652073616d652061732063757272656e74206f75747060648201527f757420726f6f7400000000000000000000000000000000000000000000000000608482015260a401610652565b611ab481602001516fffffffffffffffffffffffffffffffff166122f8565b611b66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f4d616e746c65506f7274616c3a206f75747075742070726f706f73616c20666960448201527f6e616c697a6174696f6e20706572696f6420686173206e6f7420656c6170736560648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610652565b60008381526033602052604090205460ff1615611c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f4d616e746c65506f7274616c3a207769746864726177616c2068617320616c7260448201527f65616479206265656e2066696e616c697a6564000000000000000000000000006064820152608401610652565b600083815260336020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556080840151611c4e90614e209061543c565b5a1015611cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4d616e746c65506f7274616c3a20696e73756666696369656e7420676173207460448201527f6f2066696e616c697a65207769746864726177616c00000000000000000000006064820152608401610652565b6020840151603280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556040840151600090611d4f90614e205a611d409190614f74565b87606001518860a0015161239b565b603280547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead17905560405190915084907fdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b90611db490841515815260200190565b60405180910390a280158015611dca5750326001145b15611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d616e746c65506f7274616c3a207769746864726177616c206661696c6564006044820152606401610652565b5050505050565b611e466004627a1200614fba565b81565b600054610100900460ff1615808015611e695750600054600160ff909116105b80611e835750303b158015611e83575060005460ff166001145b611f0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610652565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611f6d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b603280547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead179055603580548315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116179055611fcf6123b5565b801561203257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60006120676120618585612498565b836124a8565b90505b9392505050565b6000670de0b6b3a76400006120b26120898583614fba565b61209b90670de0b6b3a7640000615022565b6120ad85670de0b6b3a7640000615096565b6124b7565b6120bc9086615096565b6120679190614fba565b6000818310156120d6578161206a565b5090919050565b6000805a90505b825a6120f09083614f74565b1015612106576120ff82615454565b91506120e4565b505050565b6000816000015182602001518360400151846060015160405160200161214a949392919093845260208401929092526040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b80516020808301516040808501516060860151608087015160a0880151935160009761214a97909695910161548c565b6000806121a3866124e8565b90506121b18186868661251a565b9695505050505050565b6060816000036121fe57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612228578061221281615454565b91506122219050600a8361522a565b9150612202565b60008167ffffffffffffffff81111561224357612243614a9f565b6040519080825280601f01601f19166020018201604052801561226d576020820181803683370190505b5090505b84156122f057612282600183614f74565b915061228f600a866154e3565b61229a90603061543c565b60f81b8183815181106122af576122af6154f7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506122e9600a8661522a565b9450612271565b949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f4daa2916040518163ffffffff1660e01b8152600401602060405180830381865afa158015612365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123899190615423565b612393908361543c565b421192915050565b600080600080845160208601878a8af19695505050505050565b600054610100900460ff1661244c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610652565b60408051606081018252633b9aca00808252600060208301524367ffffffffffffffff169190920181905278010000000000000000000000000000000000000000000000000217600155565b6000818312156120d6578161206a565b60008183126120d6578161206a565b600061206a670de0b6b3a7640000836124cf8661254a565b6124d99190615096565b6124e39190614fba565b61278e565b6060818051906020012060405160200161250491815260200190565b6040516020818303038152906040529050919050565b60006125418461252b8786866129cd565b8051602091820120825192909101919091201490565b95945050505050565b60008082136125b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e454400000000000000000000000000000000000000000000006044820152606401610652565b600060606125c284613455565b03609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc9018302821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f01830290911d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f832019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c182136127bf57506000919050565b680755bf798b4a1bf1e58212612831576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4558505f4f564552464c4f5700000000000000000000000000000000000000006044820152606401610652565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093037fffffffffffffffffffffffffffffffffffffffdbf3ccf1604d263450f02a550481018102606090811d6d0277594991cfc85f6e2461837cd9018202811d7fffffffffffffffffffffffffffffffffffffe5adedaa1cb095af9e4da10e363c018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d7ffffffffffffffffffffffffffffffffffffd38dc772608b0ae56cce01296c0eb018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084017ffffffffffffffffffffffffffffffffffffffe2c69812cf03b0763fd454a8f7e010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b60606000845111612a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d65726b6c65547269653a20656d707479206b657900000000000000000000006044820152606401610652565b6000612a458461352b565b90506000612a528661361a565b9050600084604051602001612a6991815260200190565b60405160208183030381529060405290506000805b84518110156133cc576000858281518110612a9b57612a9b6154f7565b602002602001015190508451831115612b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4d65726b6c65547269653a206b657920696e646578206578636565647320746f60448201527f74616c206b6579206c656e6774680000000000000000000000000000000000006064820152608401610652565b82600003612bef5780518051602091820120604051612b8492612b5e92910190815260200190565b604051602081830303815290604052858051602091820120825192909101919091201490565b612bea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4d65726b6c65547269653a20696e76616c696420726f6f7420686173680000006044820152606401610652565b612d46565b805151602011612ca55780518051602091820120604051612c1992612b5e92910190815260200190565b612bea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d65726b6c65547269653a20696e76616c6964206c6172676520696e7465726e60448201527f616c2068617368000000000000000000000000000000000000000000000000006064820152608401610652565b805184516020808701919091208251919092012014612d46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d65726b6c65547269653a20696e76616c696420696e7465726e616c206e6f6460448201527f65206861736800000000000000000000000000000000000000000000000000006064820152608401610652565b612d526010600161543c565b81602001515103612f335784518303612ecb576000612d8e8260200151601081518110612d8157612d816154f7565b60200260200101516137b5565b90506000815111612e21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f4d65726b6c65547269653a2076616c7565206c656e677468206d75737420626560448201527f2067726561746572207468616e207a65726f20286272616e63682900000000006064820152608401610652565b60018751612e2f9190614f74565b8314612ebd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f4d65726b6c65547269653a2076616c7565206e6f6465206d757374206265206c60448201527f617374206e6f646520696e2070726f6f6620286272616e6368290000000000006064820152608401610652565b965061206a95505050505050565b6000858481518110612edf57612edf6154f7565b602001015160f81c60f81b60f81c9050600082602001518260ff1681518110612f0a57612f0a6154f7565b60200260200101519050612f1d81613915565b9550612f2a60018661543c565b945050506133b9565b600281602001515103613331576000612f4b8261393a565b9050600081600081518110612f6257612f626154f7565b016020015160f81c90506000612f79600283615526565b612f84906002615548565b90506000612f95848360ff1661395e565b90506000612fa38a8961395e565b90506000612fb18383613994565b905080835114613043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f4d65726b6c65547269653a20706174682072656d61696e646572206d7573742060448201527f736861726520616c6c206e6962626c65732077697468206b65790000000000006064820152608401610652565b60ff851660021480613058575060ff85166003145b1561324c57808251146130ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d65726b6c65547269653a206b65792072656d61696e646572206d757374206260448201527f65206964656e746963616c20746f20706174682072656d61696e6465720000006064820152608401610652565b60006131098860200151600181518110612d8157612d816154f7565b9050600081511161319c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f4d65726b6c65547269653a2076616c7565206c656e677468206d75737420626560448201527f2067726561746572207468616e207a65726f20286c65616629000000000000006064820152608401610652565b60018d516131aa9190614f74565b8914613238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4d65726b6c65547269653a2076616c7565206e6f6465206d757374206265206c60448201527f617374206e6f646520696e2070726f6f6620286c6561662900000000000000006064820152608401610652565b9c5061206a9b505050505050505050505050565b60ff8516158061325f575060ff85166001145b1561329e5761328b876020015160018151811061327e5761327e6154f7565b6020026020010151613915565b9950613297818a61543c565b9850613326565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4d65726b6c65547269653a2072656365697665642061206e6f6465207769746860448201527f20616e20756e6b6e6f776e2070726566697800000000000000000000000000006064820152608401610652565b5050505050506133b9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d65726b6c65547269653a20726563656976656420616e20756e70617273656160448201527f626c65206e6f64650000000000000000000000000000000000000000000000006064820152608401610652565b50806133c481615454565b915050612a7e565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4d65726b6c65547269653a2072616e206f7574206f662070726f6f6620656c6560448201527f6d656e74730000000000000000000000000000000000000000000000000000006064820152608401610652565b60008082116134c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e454400000000000000000000000000000000000000000000006044820152606401610652565b5060016fffffffffffffffffffffffffffffffff821160071b82811c67ffffffffffffffff1060061b1782811c63ffffffff1060051b1782811c61ffff1060041b1782811c60ff10600390811b90911783811c600f1060021b1783811c909110821b1791821c111790565b805160609060008167ffffffffffffffff81111561354b5761354b614a9f565b60405190808252806020026020018201604052801561359057816020015b60408051808201909152606080825260208201528152602001906001900390816135695790505b50905060005b828110156136125760405180604001604052808683815181106135bb576135bb6154f7565b602002602001015181526020016135ea8784815181106135dd576135dd6154f7565b6020026020010151613a43565b8152508282815181106135ff576135ff6154f7565b6020908102919091010152600101613596565b509392505050565b8051606090600061362c82600261556b565b67ffffffffffffffff81111561364457613644614a9f565b6040519080825280601f01601f19166020018201604052801561366e576020820181803683370190505b5090506000805b838110156137ab5785818151811061368f5761368f6154f7565b6020910101517fff000000000000000000000000000000000000000000000000000000000000008116925060041c7f0ff000000000000000000000000000000000000000000000000000000000000016836136eb83600261556b565b815181106136fb576136fb6154f7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f0f0000000000000000000000000000000000000000000000000000000000000082168361375983600261556b565b61376490600161543c565b81518110613774576137746154f7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101613675565b5090949350505050565b606060008060006137c585613a56565b9194509250905060008160018111156137e0576137e06155a8565b1461386d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f524c505265616465723a206465636f646564206974656d207479706520666f7260448201527f206279746573206973206e6f7420612064617461206974656d000000000000006064820152608401610652565b613877828461543c565b855114613906576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f524c505265616465723a2062797465732076616c756520636f6e7461696e732060448201527f616e20696e76616c69642072656d61696e6465720000000000000000000000006064820152608401610652565b612541856020015184846144c3565b606060208260000151106139315761392c826137b5565b6113b5565b6113b582614564565b60606113b56139598360200151600081518110612d8157612d816154f7565b61361a565b60608251821061397d57506040805160208101909152600081526113b5565b61206a838384865161398f9190614f74565b61457a565b600080600083518551106139a95783516139ac565b84515b90505b8082108015613a3357508382815181106139cb576139cb6154f7565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858381518110613a0a57613a0a6154f7565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016145b15613612578160010191506139af565b60606113b5613a5183614752565b61483b565b600080600080846000015111613b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f524c505265616465723a206c656e677468206f6620616e20524c50206974656d60448201527f206d7573742062652067726561746572207468616e207a65726f20746f20626560648201527f206465636f6461626c6500000000000000000000000000000000000000000000608482015260a401610652565b6020840151805160001a607f8111613b395760006001600094509450945050506144bc565b60b78111613d47576000613b4e608083614f74565b905080876000015111613c09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f742062652067726561746572207468616e20737472696e67206c656e6774682060648201527f2873686f727420737472696e6729000000000000000000000000000000000000608482015260a401610652565b6001838101517fff00000000000000000000000000000000000000000000000000000000000000169082141580613c8257507f80000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610155b613d34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f524c505265616465723a20696e76616c6964207072656669782c2073696e676c60448201527f652062797465203c203078383020617265206e6f74207072656669786564202860648201527f73686f727420737472696e672900000000000000000000000000000000000000608482015260a401610652565b50600195509350600092506144bc915050565b60bf8111614095576000613d5c60b783614f74565b905080876000015111613e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605160248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f74206265203e207468616e206c656e677468206f6620737472696e67206c656e60648201527f67746820286c6f6e6720737472696e6729000000000000000000000000000000608482015260a401610652565b60018301517fff00000000000000000000000000000000000000000000000000000000000000166000819003613ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f74206e6f74206861766520616e79206c656164696e67207a65726f7320286c6f60648201527f6e6720737472696e672900000000000000000000000000000000000000000000608482015260a401610652565b600184015160088302610100031c60378111613fb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f742062652067726561746572207468616e20353520627974657320286c6f6e6760648201527f20737472696e6729000000000000000000000000000000000000000000000000608482015260a401610652565b613fc3818461543c565b895111614078576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604c60248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f742062652067726561746572207468616e20746f74616c206c656e677468202860648201527f6c6f6e6720737472696e67290000000000000000000000000000000000000000608482015260a401610652565b61408383600161543c565b97509550600094506144bc9350505050565b60f781116141765760006140aa60c083614f74565b905080876000015111614165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f742062652067726561746572207468616e206c697374206c656e67746820287360648201527f686f7274206c6973742900000000000000000000000000000000000000000000608482015260a401610652565b6001955093508492506144bc915050565b600061418360f783614f74565b90508087600001511161423e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f74206265203e207468616e206c656e677468206f66206c697374206c656e677460648201527f6820286c6f6e67206c6973742900000000000000000000000000000000000000608482015260a401610652565b60018301517fff0000000000000000000000000000000000000000000000000000000000000016600081900361431c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f74206e6f74206861766520616e79206c656164696e67207a65726f7320286c6f60648201527f6e67206c69737429000000000000000000000000000000000000000000000000608482015260a401610652565b600184015160088302610100031c603781116143e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f742062652067726561746572207468616e20353520627974657320286c6f6e6760648201527f206c697374290000000000000000000000000000000000000000000000000000608482015260a401610652565b6143ea818461543c565b89511161449f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f524c505265616465723a206c656e677468206f6620636f6e74656e74206d757360448201527f742062652067726561746572207468616e20746f74616c206c656e677468202860648201527f6c6f6e67206c6973742900000000000000000000000000000000000000000000608482015260a401610652565b6144aa83600161543c565b97509550600194506144bc9350505050565b9193909250565b606060008267ffffffffffffffff8111156144e0576144e0614a9f565b6040519080825280601f01601f19166020018201604052801561450a576020820181803683370190505b5090508260000361451c57905061206a565b6000614528858761543c565b90506020820160005b85811015614549578281015182820152602001614531565b85811115614558576000868301525b50919695505050505050565b60606113b58260200151600084600001516144c3565b60608182601f0110156145e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610652565b828284011015614655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610652565b818301845110156146c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610652565b6060821580156146e15760405191506000825260208201604052614749565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561471a578051835260209283019201614702565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6040805180820190915260008082526020820152600082511161481d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f524c505265616465723a206c656e677468206f6620616e20524c50206974656d60448201527f206d7573742062652067726561746572207468616e207a65726f20746f20626560648201527f206465636f6461626c6500000000000000000000000000000000000000000000608482015260a401610652565b50604080518082019091528151815260209182019181019190915290565b6060600080600061484b85613a56565b919450925090506001816001811115614866576148666155a8565b146148f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f524c505265616465723a206465636f646564206974656d207479706520666f7260448201527f206c697374206973206e6f742061206c697374206974656d00000000000000006064820152608401610652565b84516148ff838561543c565b1461498c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f524c505265616465723a206c697374206974656d2068617320616e20696e766160448201527f6c696420646174612072656d61696e64657200000000000000000000000000006064820152608401610652565b6040805160208082526104208201909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816149a55790505090506000845b8751811015614a9357600080614a186040518060400160405280858d600001516149fc9190614f74565b8152602001858d60200151614a11919061543c565b9052613a56565b509150915060405180604001604052808383614a34919061543c565b8152602001848c60200151614a49919061543c565b815250858581518110614a5e57614a5e6154f7565b6020908102919091010152614a7460018561543c565b9350614a80818361543c565b614a8a908461543c565b925050506149d2565b50815295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614b1557614b15614a9f565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114614b4157600080fd5b919050565b600082601f830112614b5757600080fd5b813567ffffffffffffffff811115614b7157614b71614a9f565b614ba260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614ace565b818152846020838601011115614bb757600080fd5b816020850160208301376000918101602001919091529392505050565b600060c08284031215614be657600080fd5b60405160c0810167ffffffffffffffff8282108183111715614c0a57614c0a614a9f565b8160405282935084358352614c2160208601614b1d565b6020840152614c3260408601614b1d565b6040840152606085013560608401526080850135608084015260a0850135915080821115614c5f57600080fd5b50614c6c85828601614b46565b60a0830152505092915050565b600080600080600085870360e0811215614c9257600080fd5b863567ffffffffffffffff80821115614caa57600080fd5b614cb68a838b01614bd4565b97506020890135965060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc084011215614cef57600080fd5b60408901955060c0890135925080831115614d0957600080fd5b828901925089601f840112614d1d57600080fd5b8235915080821115614d2e57600080fd5b508860208260051b8401011115614d4457600080fd5b959894975092955050506020019190565b60005b83811015614d70578181015183820152602001614d58565b83811115614d7f576000848401525b50505050565b60008151808452614d9d816020860160208601614d55565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061206a6020830184614d85565b600060208284031215614df457600080fd5b5035919050565b600060208284031215614e0d57600080fd5b813567ffffffffffffffff811115614e2457600080fd5b6122f084828501614bd4565b80358015158114614b4157600080fd5b600060208284031215614e5257600080fd5b61206a82614e30565b600080600080600060a08688031215614e7357600080fd5b614e7c86614b1d565b945060208601359350604086013567ffffffffffffffff8082168214614ea157600080fd5b819450614eb060608901614e30565b93506080880135915080821115614ec657600080fd5b50614ed388828901614b46565b9150509295509295909350565b8581528460208201527fffffffffffffffff0000000000000000000000000000000000000000000000008460c01b16604082015282151560f81b604882015260008251614f34816049850160208701614d55565b919091016049019695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614f8657614f86614f45565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614fc957614fc9614f8b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561501d5761501d614f45565b500590565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561505c5761505c614f45565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561509057615090614f45565b50500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156150d7576150d7614f45565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561511257615112614f45565b6000871292508782058712848416161561512e5761512e614f45565b8785058712818416161561514457615144614f45565b505050929093029392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561518c5761518c614f45565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156151c0576151c0614f45565b50500190565b600067ffffffffffffffff8083168185168083038211156151e9576151e9614f45565b01949350505050565b60006fffffffffffffffffffffffffffffffff8083168185168183048111821515161561522157615221614f45565b02949350505050565b60008261523957615239614f8b565b500490565b80516fffffffffffffffffffffffffffffffff81168114614b4157600080fd5b60006060828403121561527057600080fd5b6040516060810181811067ffffffffffffffff8211171561529357615293614a9f565b604052825181526152a66020840161523e565b60208201526152b76040840161523e565b60408201529392505050565b6000608082840312156152d557600080fd5b6040516080810181811067ffffffffffffffff821117156152f8576152f8614a9f565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600067ffffffffffffffff8084111561534457615344614a9f565b8360051b6020615355818301614ace565b86815291850191818101903684111561536d57600080fd5b865b848110156153a1578035868111156153875760008081fd5b61539336828b01614b46565b84525091830191830161536f565b50979650505050505050565b600084516153bf818460208901614d55565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516153fb816001850160208a01614d55565b60019201918201528351615416816002840160208801614d55565b0160020195945050505050565b60006020828403121561543557600080fd5b5051919050565b6000821982111561544f5761544f614f45565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361548557615485614f45565b5060010190565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a08301526154d760c0830184614d85565b98975050505050505050565b6000826154f2576154f2614f8b565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff83168061553957615539614f8b565b8060ff84160691505092915050565b600060ff821660ff84168082101561556257615562614f45565b90039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156155a3576155a3614f45565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c634300080f000a",
}

// MantlePortalABI is the input ABI used to generate the binding from.
// Deprecated: Use MantlePortalMetaData.ABI instead.
var MantlePortalABI = MantlePortalMetaData.ABI

// MantlePortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MantlePortalMetaData.Bin instead.
var MantlePortalBin = MantlePortalMetaData.Bin

// DeployMantlePortal deploys a new Ethereum contract, binding an instance of MantlePortal to it.
func DeployMantlePortal(auth *bind.TransactOpts, backend bind.ContractBackend, _l2Oracle common.Address, _guardian common.Address, _paused bool) (common.Address, *types.Transaction, *MantlePortal, error) {
	parsed, err := MantlePortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MantlePortalBin), backend, _l2Oracle, _guardian, _paused)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MantlePortal{MantlePortalCaller: MantlePortalCaller{contract: contract}, MantlePortalTransactor: MantlePortalTransactor{contract: contract}, MantlePortalFilterer: MantlePortalFilterer{contract: contract}}, nil
}

// MantlePortal is an auto generated Go binding around an Ethereum contract.
type MantlePortal struct {
	MantlePortalCaller     // Read-only binding to the contract
	MantlePortalTransactor // Write-only binding to the contract
	MantlePortalFilterer   // Log filterer for contract events
}

// MantlePortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type MantlePortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MantlePortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MantlePortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MantlePortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MantlePortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MantlePortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MantlePortalSession struct {
	Contract     *MantlePortal     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MantlePortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MantlePortalCallerSession struct {
	Contract *MantlePortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// MantlePortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MantlePortalTransactorSession struct {
	Contract     *MantlePortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// MantlePortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type MantlePortalRaw struct {
	Contract *MantlePortal // Generic contract binding to access the raw methods on
}

// MantlePortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MantlePortalCallerRaw struct {
	Contract *MantlePortalCaller // Generic read-only contract binding to access the raw methods on
}

// MantlePortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MantlePortalTransactorRaw struct {
	Contract *MantlePortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMantlePortal creates a new instance of MantlePortal, bound to a specific deployed contract.
func NewMantlePortal(address common.Address, backend bind.ContractBackend) (*MantlePortal, error) {
	contract, err := bindMantlePortal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MantlePortal{MantlePortalCaller: MantlePortalCaller{contract: contract}, MantlePortalTransactor: MantlePortalTransactor{contract: contract}, MantlePortalFilterer: MantlePortalFilterer{contract: contract}}, nil
}

// NewMantlePortalCaller creates a new read-only instance of MantlePortal, bound to a specific deployed contract.
func NewMantlePortalCaller(address common.Address, caller bind.ContractCaller) (*MantlePortalCaller, error) {
	contract, err := bindMantlePortal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MantlePortalCaller{contract: contract}, nil
}

// NewMantlePortalTransactor creates a new write-only instance of MantlePortal, bound to a specific deployed contract.
func NewMantlePortalTransactor(address common.Address, transactor bind.ContractTransactor) (*MantlePortalTransactor, error) {
	contract, err := bindMantlePortal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MantlePortalTransactor{contract: contract}, nil
}

// NewMantlePortalFilterer creates a new log filterer instance of MantlePortal, bound to a specific deployed contract.
func NewMantlePortalFilterer(address common.Address, filterer bind.ContractFilterer) (*MantlePortalFilterer, error) {
	contract, err := bindMantlePortal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MantlePortalFilterer{contract: contract}, nil
}

// bindMantlePortal binds a generic wrapper to an already deployed contract.
func bindMantlePortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MantlePortalMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MantlePortal *MantlePortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MantlePortal.Contract.MantlePortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MantlePortal *MantlePortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantlePortal.Contract.MantlePortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MantlePortal *MantlePortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MantlePortal.Contract.MantlePortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MantlePortal *MantlePortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MantlePortal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MantlePortal *MantlePortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantlePortal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MantlePortal *MantlePortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MantlePortal.Contract.contract.Transact(opts, method, params...)
}

// BASEFEEMAXCHANGEDENOMINATOR is a free data retrieval call binding the contract method 0xcd7c9789.
//
// Solidity: function BASE_FEE_MAX_CHANGE_DENOMINATOR() view returns(int256)
func (_MantlePortal *MantlePortalCaller) BASEFEEMAXCHANGEDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "BASE_FEE_MAX_CHANGE_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BASEFEEMAXCHANGEDENOMINATOR is a free data retrieval call binding the contract method 0xcd7c9789.
//
// Solidity: function BASE_FEE_MAX_CHANGE_DENOMINATOR() view returns(int256)
func (_MantlePortal *MantlePortalSession) BASEFEEMAXCHANGEDENOMINATOR() (*big.Int, error) {
	return _MantlePortal.Contract.BASEFEEMAXCHANGEDENOMINATOR(&_MantlePortal.CallOpts)
}

// BASEFEEMAXCHANGEDENOMINATOR is a free data retrieval call binding the contract method 0xcd7c9789.
//
// Solidity: function BASE_FEE_MAX_CHANGE_DENOMINATOR() view returns(int256)
func (_MantlePortal *MantlePortalCallerSession) BASEFEEMAXCHANGEDENOMINATOR() (*big.Int, error) {
	return _MantlePortal.Contract.BASEFEEMAXCHANGEDENOMINATOR(&_MantlePortal.CallOpts)
}

// ELASTICITYMULTIPLIER is a free data retrieval call binding the contract method 0x6bb0291e.
//
// Solidity: function ELASTICITY_MULTIPLIER() view returns(int256)
func (_MantlePortal *MantlePortalCaller) ELASTICITYMULTIPLIER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "ELASTICITY_MULTIPLIER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ELASTICITYMULTIPLIER is a free data retrieval call binding the contract method 0x6bb0291e.
//
// Solidity: function ELASTICITY_MULTIPLIER() view returns(int256)
func (_MantlePortal *MantlePortalSession) ELASTICITYMULTIPLIER() (*big.Int, error) {
	return _MantlePortal.Contract.ELASTICITYMULTIPLIER(&_MantlePortal.CallOpts)
}

// ELASTICITYMULTIPLIER is a free data retrieval call binding the contract method 0x6bb0291e.
//
// Solidity: function ELASTICITY_MULTIPLIER() view returns(int256)
func (_MantlePortal *MantlePortalCallerSession) ELASTICITYMULTIPLIER() (*big.Int, error) {
	return _MantlePortal.Contract.ELASTICITYMULTIPLIER(&_MantlePortal.CallOpts)
}

// GUARDIAN is a free data retrieval call binding the contract method 0x724c184c.
//
// Solidity: function GUARDIAN() view returns(address)
func (_MantlePortal *MantlePortalCaller) GUARDIAN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "GUARDIAN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GUARDIAN is a free data retrieval call binding the contract method 0x724c184c.
//
// Solidity: function GUARDIAN() view returns(address)
func (_MantlePortal *MantlePortalSession) GUARDIAN() (common.Address, error) {
	return _MantlePortal.Contract.GUARDIAN(&_MantlePortal.CallOpts)
}

// GUARDIAN is a free data retrieval call binding the contract method 0x724c184c.
//
// Solidity: function GUARDIAN() view returns(address)
func (_MantlePortal *MantlePortalCallerSession) GUARDIAN() (common.Address, error) {
	return _MantlePortal.Contract.GUARDIAN(&_MantlePortal.CallOpts)
}

// INITIALBASEFEE is a free data retrieval call binding the contract method 0x13620abd.
//
// Solidity: function INITIAL_BASE_FEE() view returns(uint128)
func (_MantlePortal *MantlePortalCaller) INITIALBASEFEE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "INITIAL_BASE_FEE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// INITIALBASEFEE is a free data retrieval call binding the contract method 0x13620abd.
//
// Solidity: function INITIAL_BASE_FEE() view returns(uint128)
func (_MantlePortal *MantlePortalSession) INITIALBASEFEE() (*big.Int, error) {
	return _MantlePortal.Contract.INITIALBASEFEE(&_MantlePortal.CallOpts)
}

// INITIALBASEFEE is a free data retrieval call binding the contract method 0x13620abd.
//
// Solidity: function INITIAL_BASE_FEE() view returns(uint128)
func (_MantlePortal *MantlePortalCallerSession) INITIALBASEFEE() (*big.Int, error) {
	return _MantlePortal.Contract.INITIALBASEFEE(&_MantlePortal.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_MantlePortal *MantlePortalCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_MantlePortal *MantlePortalSession) L2ORACLE() (common.Address, error) {
	return _MantlePortal.Contract.L2ORACLE(&_MantlePortal.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_MantlePortal *MantlePortalCallerSession) L2ORACLE() (common.Address, error) {
	return _MantlePortal.Contract.L2ORACLE(&_MantlePortal.CallOpts)
}

// MAXIMUMBASEFEE is a free data retrieval call binding the contract method 0x5c1f2827.
//
// Solidity: function MAXIMUM_BASE_FEE() view returns(int256)
func (_MantlePortal *MantlePortalCaller) MAXIMUMBASEFEE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "MAXIMUM_BASE_FEE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXIMUMBASEFEE is a free data retrieval call binding the contract method 0x5c1f2827.
//
// Solidity: function MAXIMUM_BASE_FEE() view returns(int256)
func (_MantlePortal *MantlePortalSession) MAXIMUMBASEFEE() (*big.Int, error) {
	return _MantlePortal.Contract.MAXIMUMBASEFEE(&_MantlePortal.CallOpts)
}

// MAXIMUMBASEFEE is a free data retrieval call binding the contract method 0x5c1f2827.
//
// Solidity: function MAXIMUM_BASE_FEE() view returns(int256)
func (_MantlePortal *MantlePortalCallerSession) MAXIMUMBASEFEE() (*big.Int, error) {
	return _MantlePortal.Contract.MAXIMUMBASEFEE(&_MantlePortal.CallOpts)
}

// MAXRESOURCELIMIT is a free data retrieval call binding the contract method 0x64b79208.
//
// Solidity: function MAX_RESOURCE_LIMIT() view returns(int256)
func (_MantlePortal *MantlePortalCaller) MAXRESOURCELIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "MAX_RESOURCE_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXRESOURCELIMIT is a free data retrieval call binding the contract method 0x64b79208.
//
// Solidity: function MAX_RESOURCE_LIMIT() view returns(int256)
func (_MantlePortal *MantlePortalSession) MAXRESOURCELIMIT() (*big.Int, error) {
	return _MantlePortal.Contract.MAXRESOURCELIMIT(&_MantlePortal.CallOpts)
}

// MAXRESOURCELIMIT is a free data retrieval call binding the contract method 0x64b79208.
//
// Solidity: function MAX_RESOURCE_LIMIT() view returns(int256)
func (_MantlePortal *MantlePortalCallerSession) MAXRESOURCELIMIT() (*big.Int, error) {
	return _MantlePortal.Contract.MAXRESOURCELIMIT(&_MantlePortal.CallOpts)
}

// MINIMUMBASEFEE is a free data retrieval call binding the contract method 0x867ead13.
//
// Solidity: function MINIMUM_BASE_FEE() view returns(int256)
func (_MantlePortal *MantlePortalCaller) MINIMUMBASEFEE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "MINIMUM_BASE_FEE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINIMUMBASEFEE is a free data retrieval call binding the contract method 0x867ead13.
//
// Solidity: function MINIMUM_BASE_FEE() view returns(int256)
func (_MantlePortal *MantlePortalSession) MINIMUMBASEFEE() (*big.Int, error) {
	return _MantlePortal.Contract.MINIMUMBASEFEE(&_MantlePortal.CallOpts)
}

// MINIMUMBASEFEE is a free data retrieval call binding the contract method 0x867ead13.
//
// Solidity: function MINIMUM_BASE_FEE() view returns(int256)
func (_MantlePortal *MantlePortalCallerSession) MINIMUMBASEFEE() (*big.Int, error) {
	return _MantlePortal.Contract.MINIMUMBASEFEE(&_MantlePortal.CallOpts)
}

// TARGETRESOURCELIMIT is a free data retrieval call binding the contract method 0xca3e99ba.
//
// Solidity: function TARGET_RESOURCE_LIMIT() view returns(int256)
func (_MantlePortal *MantlePortalCaller) TARGETRESOURCELIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "TARGET_RESOURCE_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TARGETRESOURCELIMIT is a free data retrieval call binding the contract method 0xca3e99ba.
//
// Solidity: function TARGET_RESOURCE_LIMIT() view returns(int256)
func (_MantlePortal *MantlePortalSession) TARGETRESOURCELIMIT() (*big.Int, error) {
	return _MantlePortal.Contract.TARGETRESOURCELIMIT(&_MantlePortal.CallOpts)
}

// TARGETRESOURCELIMIT is a free data retrieval call binding the contract method 0xca3e99ba.
//
// Solidity: function TARGET_RESOURCE_LIMIT() view returns(int256)
func (_MantlePortal *MantlePortalCallerSession) TARGETRESOURCELIMIT() (*big.Int, error) {
	return _MantlePortal.Contract.TARGETRESOURCELIMIT(&_MantlePortal.CallOpts)
}

// FinalizedWithdrawals is a free data retrieval call binding the contract method 0xa14238e7.
//
// Solidity: function finalizedWithdrawals(bytes32 ) view returns(bool)
func (_MantlePortal *MantlePortalCaller) FinalizedWithdrawals(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "finalizedWithdrawals", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// FinalizedWithdrawals is a free data retrieval call binding the contract method 0xa14238e7.
//
// Solidity: function finalizedWithdrawals(bytes32 ) view returns(bool)
func (_MantlePortal *MantlePortalSession) FinalizedWithdrawals(arg0 [32]byte) (bool, error) {
	return _MantlePortal.Contract.FinalizedWithdrawals(&_MantlePortal.CallOpts, arg0)
}

// FinalizedWithdrawals is a free data retrieval call binding the contract method 0xa14238e7.
//
// Solidity: function finalizedWithdrawals(bytes32 ) view returns(bool)
func (_MantlePortal *MantlePortalCallerSession) FinalizedWithdrawals(arg0 [32]byte) (bool, error) {
	return _MantlePortal.Contract.FinalizedWithdrawals(&_MantlePortal.CallOpts, arg0)
}

// IsOutputFinalized is a free data retrieval call binding the contract method 0x6dbffb78.
//
// Solidity: function isOutputFinalized(uint256 _l2OutputIndex) view returns(bool)
func (_MantlePortal *MantlePortalCaller) IsOutputFinalized(opts *bind.CallOpts, _l2OutputIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "isOutputFinalized", _l2OutputIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOutputFinalized is a free data retrieval call binding the contract method 0x6dbffb78.
//
// Solidity: function isOutputFinalized(uint256 _l2OutputIndex) view returns(bool)
func (_MantlePortal *MantlePortalSession) IsOutputFinalized(_l2OutputIndex *big.Int) (bool, error) {
	return _MantlePortal.Contract.IsOutputFinalized(&_MantlePortal.CallOpts, _l2OutputIndex)
}

// IsOutputFinalized is a free data retrieval call binding the contract method 0x6dbffb78.
//
// Solidity: function isOutputFinalized(uint256 _l2OutputIndex) view returns(bool)
func (_MantlePortal *MantlePortalCallerSession) IsOutputFinalized(_l2OutputIndex *big.Int) (bool, error) {
	return _MantlePortal.Contract.IsOutputFinalized(&_MantlePortal.CallOpts, _l2OutputIndex)
}

// L2Sender is a free data retrieval call binding the contract method 0x9bf62d82.
//
// Solidity: function l2Sender() view returns(address)
func (_MantlePortal *MantlePortalCaller) L2Sender(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "l2Sender")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2Sender is a free data retrieval call binding the contract method 0x9bf62d82.
//
// Solidity: function l2Sender() view returns(address)
func (_MantlePortal *MantlePortalSession) L2Sender() (common.Address, error) {
	return _MantlePortal.Contract.L2Sender(&_MantlePortal.CallOpts)
}

// L2Sender is a free data retrieval call binding the contract method 0x9bf62d82.
//
// Solidity: function l2Sender() view returns(address)
func (_MantlePortal *MantlePortalCallerSession) L2Sender() (common.Address, error) {
	return _MantlePortal.Contract.L2Sender(&_MantlePortal.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)
func (_MantlePortal *MantlePortalCaller) Params(opts *bind.CallOpts) (struct {
	PrevBaseFee   *big.Int
	PrevBoughtGas uint64
	PrevBlockNum  uint64
}, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "params")

	outstruct := new(struct {
		PrevBaseFee   *big.Int
		PrevBoughtGas uint64
		PrevBlockNum  uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PrevBaseFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PrevBoughtGas = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.PrevBlockNum = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)
func (_MantlePortal *MantlePortalSession) Params() (struct {
	PrevBaseFee   *big.Int
	PrevBoughtGas uint64
	PrevBlockNum  uint64
}, error) {
	return _MantlePortal.Contract.Params(&_MantlePortal.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)
func (_MantlePortal *MantlePortalCallerSession) Params() (struct {
	PrevBaseFee   *big.Int
	PrevBoughtGas uint64
	PrevBlockNum  uint64
}, error) {
	return _MantlePortal.Contract.Params(&_MantlePortal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MantlePortal *MantlePortalCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MantlePortal *MantlePortalSession) Paused() (bool, error) {
	return _MantlePortal.Contract.Paused(&_MantlePortal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MantlePortal *MantlePortalCallerSession) Paused() (bool, error) {
	return _MantlePortal.Contract.Paused(&_MantlePortal.CallOpts)
}

// ProvenWithdrawals is a free data retrieval call binding the contract method 0xe965084c.
//
// Solidity: function provenWithdrawals(bytes32 ) view returns(bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)
func (_MantlePortal *MantlePortalCaller) ProvenWithdrawals(opts *bind.CallOpts, arg0 [32]byte) (struct {
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2OutputIndex *big.Int
}, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "provenWithdrawals", arg0)

	outstruct := new(struct {
		OutputRoot    [32]byte
		Timestamp     *big.Int
		L2OutputIndex *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OutputRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.L2OutputIndex = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ProvenWithdrawals is a free data retrieval call binding the contract method 0xe965084c.
//
// Solidity: function provenWithdrawals(bytes32 ) view returns(bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)
func (_MantlePortal *MantlePortalSession) ProvenWithdrawals(arg0 [32]byte) (struct {
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2OutputIndex *big.Int
}, error) {
	return _MantlePortal.Contract.ProvenWithdrawals(&_MantlePortal.CallOpts, arg0)
}

// ProvenWithdrawals is a free data retrieval call binding the contract method 0xe965084c.
//
// Solidity: function provenWithdrawals(bytes32 ) view returns(bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)
func (_MantlePortal *MantlePortalCallerSession) ProvenWithdrawals(arg0 [32]byte) (struct {
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2OutputIndex *big.Int
}, error) {
	return _MantlePortal.Contract.ProvenWithdrawals(&_MantlePortal.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MantlePortal *MantlePortalCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MantlePortal.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MantlePortal *MantlePortalSession) Version() (string, error) {
	return _MantlePortal.Contract.Version(&_MantlePortal.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MantlePortal *MantlePortalCallerSession) Version() (string, error) {
	return _MantlePortal.Contract.Version(&_MantlePortal.CallOpts)
}

// DepositTransaction is a paid mutator transaction binding the contract method 0xe9e05c42.
//
// Solidity: function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable returns()
func (_MantlePortal *MantlePortalTransactor) DepositTransaction(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _gasLimit uint64, _isCreation bool, _data []byte) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "depositTransaction", _to, _value, _gasLimit, _isCreation, _data)
}

// DepositTransaction is a paid mutator transaction binding the contract method 0xe9e05c42.
//
// Solidity: function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable returns()
func (_MantlePortal *MantlePortalSession) DepositTransaction(_to common.Address, _value *big.Int, _gasLimit uint64, _isCreation bool, _data []byte) (*types.Transaction, error) {
	return _MantlePortal.Contract.DepositTransaction(&_MantlePortal.TransactOpts, _to, _value, _gasLimit, _isCreation, _data)
}

// DepositTransaction is a paid mutator transaction binding the contract method 0xe9e05c42.
//
// Solidity: function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable returns()
func (_MantlePortal *MantlePortalTransactorSession) DepositTransaction(_to common.Address, _value *big.Int, _gasLimit uint64, _isCreation bool, _data []byte) (*types.Transaction, error) {
	return _MantlePortal.Contract.DepositTransaction(&_MantlePortal.TransactOpts, _to, _value, _gasLimit, _isCreation, _data)
}

// DonateETH is a paid mutator transaction binding the contract method 0x8b4c40b0.
//
// Solidity: function donateETH() payable returns()
func (_MantlePortal *MantlePortalTransactor) DonateETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "donateETH")
}

// DonateETH is a paid mutator transaction binding the contract method 0x8b4c40b0.
//
// Solidity: function donateETH() payable returns()
func (_MantlePortal *MantlePortalSession) DonateETH() (*types.Transaction, error) {
	return _MantlePortal.Contract.DonateETH(&_MantlePortal.TransactOpts)
}

// DonateETH is a paid mutator transaction binding the contract method 0x8b4c40b0.
//
// Solidity: function donateETH() payable returns()
func (_MantlePortal *MantlePortalTransactorSession) DonateETH() (*types.Transaction, error) {
	return _MantlePortal.Contract.DonateETH(&_MantlePortal.TransactOpts)
}

// FinalizeWithdrawalTransaction is a paid mutator transaction binding the contract method 0x8c3152e9.
//
// Solidity: function finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx) returns()
func (_MantlePortal *MantlePortalTransactor) FinalizeWithdrawalTransaction(opts *bind.TransactOpts, _tx TypesWithdrawalTransaction) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "finalizeWithdrawalTransaction", _tx)
}

// FinalizeWithdrawalTransaction is a paid mutator transaction binding the contract method 0x8c3152e9.
//
// Solidity: function finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx) returns()
func (_MantlePortal *MantlePortalSession) FinalizeWithdrawalTransaction(_tx TypesWithdrawalTransaction) (*types.Transaction, error) {
	return _MantlePortal.Contract.FinalizeWithdrawalTransaction(&_MantlePortal.TransactOpts, _tx)
}

// FinalizeWithdrawalTransaction is a paid mutator transaction binding the contract method 0x8c3152e9.
//
// Solidity: function finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx) returns()
func (_MantlePortal *MantlePortalTransactorSession) FinalizeWithdrawalTransaction(_tx TypesWithdrawalTransaction) (*types.Transaction, error) {
	return _MantlePortal.Contract.FinalizeWithdrawalTransaction(&_MantlePortal.TransactOpts, _tx)
}

// Initialize is a paid mutator transaction binding the contract method 0xd53a822f.
//
// Solidity: function initialize(bool _paused) returns()
func (_MantlePortal *MantlePortalTransactor) Initialize(opts *bind.TransactOpts, _paused bool) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "initialize", _paused)
}

// Initialize is a paid mutator transaction binding the contract method 0xd53a822f.
//
// Solidity: function initialize(bool _paused) returns()
func (_MantlePortal *MantlePortalSession) Initialize(_paused bool) (*types.Transaction, error) {
	return _MantlePortal.Contract.Initialize(&_MantlePortal.TransactOpts, _paused)
}

// Initialize is a paid mutator transaction binding the contract method 0xd53a822f.
//
// Solidity: function initialize(bool _paused) returns()
func (_MantlePortal *MantlePortalTransactorSession) Initialize(_paused bool) (*types.Transaction, error) {
	return _MantlePortal.Contract.Initialize(&_MantlePortal.TransactOpts, _paused)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MantlePortal *MantlePortalTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MantlePortal *MantlePortalSession) Pause() (*types.Transaction, error) {
	return _MantlePortal.Contract.Pause(&_MantlePortal.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MantlePortal *MantlePortalTransactorSession) Pause() (*types.Transaction, error) {
	return _MantlePortal.Contract.Pause(&_MantlePortal.TransactOpts)
}

// ProveWithdrawalTransaction is a paid mutator transaction binding the contract method 0x4870496f.
//
// Solidity: function proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx, uint256 _l2OutputIndex, (bytes32,bytes32,bytes32,bytes32) _outputRootProof, bytes[] _withdrawalProof) returns()
func (_MantlePortal *MantlePortalTransactor) ProveWithdrawalTransaction(opts *bind.TransactOpts, _tx TypesWithdrawalTransaction, _l2OutputIndex *big.Int, _outputRootProof TypesOutputRootProof, _withdrawalProof [][]byte) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "proveWithdrawalTransaction", _tx, _l2OutputIndex, _outputRootProof, _withdrawalProof)
}

// ProveWithdrawalTransaction is a paid mutator transaction binding the contract method 0x4870496f.
//
// Solidity: function proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx, uint256 _l2OutputIndex, (bytes32,bytes32,bytes32,bytes32) _outputRootProof, bytes[] _withdrawalProof) returns()
func (_MantlePortal *MantlePortalSession) ProveWithdrawalTransaction(_tx TypesWithdrawalTransaction, _l2OutputIndex *big.Int, _outputRootProof TypesOutputRootProof, _withdrawalProof [][]byte) (*types.Transaction, error) {
	return _MantlePortal.Contract.ProveWithdrawalTransaction(&_MantlePortal.TransactOpts, _tx, _l2OutputIndex, _outputRootProof, _withdrawalProof)
}

// ProveWithdrawalTransaction is a paid mutator transaction binding the contract method 0x4870496f.
//
// Solidity: function proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx, uint256 _l2OutputIndex, (bytes32,bytes32,bytes32,bytes32) _outputRootProof, bytes[] _withdrawalProof) returns()
func (_MantlePortal *MantlePortalTransactorSession) ProveWithdrawalTransaction(_tx TypesWithdrawalTransaction, _l2OutputIndex *big.Int, _outputRootProof TypesOutputRootProof, _withdrawalProof [][]byte) (*types.Transaction, error) {
	return _MantlePortal.Contract.ProveWithdrawalTransaction(&_MantlePortal.TransactOpts, _tx, _l2OutputIndex, _outputRootProof, _withdrawalProof)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MantlePortal *MantlePortalTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantlePortal.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MantlePortal *MantlePortalSession) Unpause() (*types.Transaction, error) {
	return _MantlePortal.Contract.Unpause(&_MantlePortal.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MantlePortal *MantlePortalTransactorSession) Unpause() (*types.Transaction, error) {
	return _MantlePortal.Contract.Unpause(&_MantlePortal.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_MantlePortal *MantlePortalTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MantlePortal.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_MantlePortal *MantlePortalSession) Receive() (*types.Transaction, error) {
	return _MantlePortal.Contract.Receive(&_MantlePortal.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_MantlePortal *MantlePortalTransactorSession) Receive() (*types.Transaction, error) {
	return _MantlePortal.Contract.Receive(&_MantlePortal.TransactOpts)
}

// MantlePortalInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the MantlePortal contract.
type MantlePortalInitializedIterator struct {
	Event *MantlePortalInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantlePortalInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantlePortalInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantlePortalInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantlePortalInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantlePortalInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantlePortalInitialized represents a Initialized event raised by the MantlePortal contract.
type MantlePortalInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MantlePortal *MantlePortalFilterer) FilterInitialized(opts *bind.FilterOpts) (*MantlePortalInitializedIterator, error) {

	logs, sub, err := _MantlePortal.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &MantlePortalInitializedIterator{contract: _MantlePortal.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MantlePortal *MantlePortalFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *MantlePortalInitialized) (event.Subscription, error) {

	logs, sub, err := _MantlePortal.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantlePortalInitialized)
				if err := _MantlePortal.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MantlePortal *MantlePortalFilterer) ParseInitialized(log types.Log) (*MantlePortalInitialized, error) {
	event := new(MantlePortalInitialized)
	if err := _MantlePortal.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MantlePortalPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the MantlePortal contract.
type MantlePortalPausedIterator struct {
	Event *MantlePortalPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantlePortalPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantlePortalPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantlePortalPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantlePortalPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantlePortalPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantlePortalPaused represents a Paused event raised by the MantlePortal contract.
type MantlePortalPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MantlePortal *MantlePortalFilterer) FilterPaused(opts *bind.FilterOpts) (*MantlePortalPausedIterator, error) {

	logs, sub, err := _MantlePortal.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MantlePortalPausedIterator{contract: _MantlePortal.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MantlePortal *MantlePortalFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MantlePortalPaused) (event.Subscription, error) {

	logs, sub, err := _MantlePortal.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantlePortalPaused)
				if err := _MantlePortal.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MantlePortal *MantlePortalFilterer) ParsePaused(log types.Log) (*MantlePortalPaused, error) {
	event := new(MantlePortalPaused)
	if err := _MantlePortal.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MantlePortalTransactionDepositedIterator is returned from FilterTransactionDeposited and is used to iterate over the raw logs and unpacked data for TransactionDeposited events raised by the MantlePortal contract.
type MantlePortalTransactionDepositedIterator struct {
	Event *MantlePortalTransactionDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantlePortalTransactionDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantlePortalTransactionDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantlePortalTransactionDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantlePortalTransactionDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantlePortalTransactionDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantlePortalTransactionDeposited represents a TransactionDeposited event raised by the MantlePortal contract.
type MantlePortalTransactionDeposited struct {
	From       common.Address
	To         common.Address
	Version    *big.Int
	OpaqueData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionDeposited is a free log retrieval operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MantlePortal *MantlePortalFilterer) FilterTransactionDeposited(opts *bind.FilterOpts, from []common.Address, to []common.Address, version []*big.Int) (*MantlePortalTransactionDepositedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var versionRule []interface{}
	for _, versionItem := range version {
		versionRule = append(versionRule, versionItem)
	}

	logs, sub, err := _MantlePortal.contract.FilterLogs(opts, "TransactionDeposited", fromRule, toRule, versionRule)
	if err != nil {
		return nil, err
	}
	return &MantlePortalTransactionDepositedIterator{contract: _MantlePortal.contract, event: "TransactionDeposited", logs: logs, sub: sub}, nil
}

// WatchTransactionDeposited is a free log subscription operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MantlePortal *MantlePortalFilterer) WatchTransactionDeposited(opts *bind.WatchOpts, sink chan<- *MantlePortalTransactionDeposited, from []common.Address, to []common.Address, version []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var versionRule []interface{}
	for _, versionItem := range version {
		versionRule = append(versionRule, versionItem)
	}

	logs, sub, err := _MantlePortal.contract.WatchLogs(opts, "TransactionDeposited", fromRule, toRule, versionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantlePortalTransactionDeposited)
				if err := _MantlePortal.contract.UnpackLog(event, "TransactionDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionDeposited is a log parse operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MantlePortal *MantlePortalFilterer) ParseTransactionDeposited(log types.Log) (*MantlePortalTransactionDeposited, error) {
	event := new(MantlePortalTransactionDeposited)
	if err := _MantlePortal.contract.UnpackLog(event, "TransactionDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MantlePortalUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the MantlePortal contract.
type MantlePortalUnpausedIterator struct {
	Event *MantlePortalUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantlePortalUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantlePortalUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantlePortalUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantlePortalUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantlePortalUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantlePortalUnpaused represents a Unpaused event raised by the MantlePortal contract.
type MantlePortalUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MantlePortal *MantlePortalFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MantlePortalUnpausedIterator, error) {

	logs, sub, err := _MantlePortal.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MantlePortalUnpausedIterator{contract: _MantlePortal.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MantlePortal *MantlePortalFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MantlePortalUnpaused) (event.Subscription, error) {

	logs, sub, err := _MantlePortal.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantlePortalUnpaused)
				if err := _MantlePortal.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MantlePortal *MantlePortalFilterer) ParseUnpaused(log types.Log) (*MantlePortalUnpaused, error) {
	event := new(MantlePortalUnpaused)
	if err := _MantlePortal.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MantlePortalWithdrawalFinalizedIterator is returned from FilterWithdrawalFinalized and is used to iterate over the raw logs and unpacked data for WithdrawalFinalized events raised by the MantlePortal contract.
type MantlePortalWithdrawalFinalizedIterator struct {
	Event *MantlePortalWithdrawalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantlePortalWithdrawalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantlePortalWithdrawalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantlePortalWithdrawalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantlePortalWithdrawalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantlePortalWithdrawalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantlePortalWithdrawalFinalized represents a WithdrawalFinalized event raised by the MantlePortal contract.
type MantlePortalWithdrawalFinalized struct {
	WithdrawalHash [32]byte
	Success        bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalFinalized is a free log retrieval operation binding the contract event 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b.
//
// Solidity: event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)
func (_MantlePortal *MantlePortalFilterer) FilterWithdrawalFinalized(opts *bind.FilterOpts, withdrawalHash [][32]byte) (*MantlePortalWithdrawalFinalizedIterator, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}

	logs, sub, err := _MantlePortal.contract.FilterLogs(opts, "WithdrawalFinalized", withdrawalHashRule)
	if err != nil {
		return nil, err
	}
	return &MantlePortalWithdrawalFinalizedIterator{contract: _MantlePortal.contract, event: "WithdrawalFinalized", logs: logs, sub: sub}, nil
}

// WatchWithdrawalFinalized is a free log subscription operation binding the contract event 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b.
//
// Solidity: event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)
func (_MantlePortal *MantlePortalFilterer) WatchWithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *MantlePortalWithdrawalFinalized, withdrawalHash [][32]byte) (event.Subscription, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}

	logs, sub, err := _MantlePortal.contract.WatchLogs(opts, "WithdrawalFinalized", withdrawalHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantlePortalWithdrawalFinalized)
				if err := _MantlePortal.contract.UnpackLog(event, "WithdrawalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalFinalized is a log parse operation binding the contract event 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b.
//
// Solidity: event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)
func (_MantlePortal *MantlePortalFilterer) ParseWithdrawalFinalized(log types.Log) (*MantlePortalWithdrawalFinalized, error) {
	event := new(MantlePortalWithdrawalFinalized)
	if err := _MantlePortal.contract.UnpackLog(event, "WithdrawalFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MantlePortalWithdrawalProvenIterator is returned from FilterWithdrawalProven and is used to iterate over the raw logs and unpacked data for WithdrawalProven events raised by the MantlePortal contract.
type MantlePortalWithdrawalProvenIterator struct {
	Event *MantlePortalWithdrawalProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MantlePortalWithdrawalProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MantlePortalWithdrawalProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MantlePortalWithdrawalProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MantlePortalWithdrawalProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MantlePortalWithdrawalProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MantlePortalWithdrawalProven represents a WithdrawalProven event raised by the MantlePortal contract.
type MantlePortalWithdrawalProven struct {
	WithdrawalHash [32]byte
	From           common.Address
	To             common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalProven is a free log retrieval operation binding the contract event 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62.
//
// Solidity: event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)
func (_MantlePortal *MantlePortalFilterer) FilterWithdrawalProven(opts *bind.FilterOpts, withdrawalHash [][32]byte, from []common.Address, to []common.Address) (*MantlePortalWithdrawalProvenIterator, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MantlePortal.contract.FilterLogs(opts, "WithdrawalProven", withdrawalHashRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MantlePortalWithdrawalProvenIterator{contract: _MantlePortal.contract, event: "WithdrawalProven", logs: logs, sub: sub}, nil
}

// WatchWithdrawalProven is a free log subscription operation binding the contract event 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62.
//
// Solidity: event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)
func (_MantlePortal *MantlePortalFilterer) WatchWithdrawalProven(opts *bind.WatchOpts, sink chan<- *MantlePortalWithdrawalProven, withdrawalHash [][32]byte, from []common.Address, to []common.Address) (event.Subscription, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MantlePortal.contract.WatchLogs(opts, "WithdrawalProven", withdrawalHashRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MantlePortalWithdrawalProven)
				if err := _MantlePortal.contract.UnpackLog(event, "WithdrawalProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalProven is a log parse operation binding the contract event 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62.
//
// Solidity: event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)
func (_MantlePortal *MantlePortalFilterer) ParseWithdrawalProven(log types.Log) (*MantlePortalWithdrawalProven, error) {
	event := new(MantlePortalWithdrawalProven)
	if err := _MantlePortal.contract.UnpackLog(event, "WithdrawalProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
